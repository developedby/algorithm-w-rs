type (Nat) = (Zero) | (Succ pred: (Nat))
type (Pair a b) = (Pair fst: a snd: b)
type (Bool) = (True) | (False)

id = λx x

fst = λp match p = p {
  Pair: (p.fst)
}

snd = λp match p = p {
  Pair: (p.snd)
}

swap = λp match p = p {
  Pair: (Pair p.snd p.fst)
}

not = λb match b = b {
  True: False
  False: True
}

flip = λf λx λy (f y x)

y = λf (f (y f))

is_even = λn match n = n {
  Zero: True
  Succ: (is_odd n.pred)
}
is_odd = λn match n = n {
  Zero: False
  Succ: (is_even n.pred)
}

equal = λa λb match a = a {
  Zero: (equal_zero b)
  Succ: (equal_succ a.pred b)
}
equal_zero = λb match b = b {
  Zero: True
  Succ: False
}
equal_succ = λa.p λb match b = b {
  Zero: False
  Succ: (equal a.p b.pred)
}
